{"version":3,"sources":["components/Display.js","components/Button.js","components/Keypad.js","components/Calculator.js","index.js"],"names":["Display","props","value","id","className","type","tabIndex","Button","buttonStyle","label","onClick","name","Keypad","actionToPerform","allClear","functionKeys","handleClickButton","keyType","map","functionKey","numericKey","lastRowKey","operatorKey","Calculator","useState","accValue","setAccValue","screenValue","setScreenValue","currentOperator","setCurrentOperator","expectsOperand","setExpectsOperand","handleClickFunctionKey","clearScreen","reverseSign","percentage","addDecimalPoint","isScreenClear","String","parseFloat","includes","useEffect","document","addEventListener","handleKeyDown","removeEventListener","e","key","preventDefault","clearLastDigit","length","substring","handleClickNumericKey","handleClickOperator","operator","inputValue","resultValue","operate","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.391414ae.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Display = (props) => {\n   const { value } = props;\n   return (\n      <div id=\"display\" className=\"flex\">\n         <input type=\"text\" tabIndex=\"-1\" value={value} />\n      </div>\n   )\n}\n\nexport default Display;","import React from \"react\";\n\nconst Button = (props) => {\n    const { value, type, buttonStyle, label, onClick } = props;\n\n    const handleButtonClick = () => {\n        onClick(value, type);\n    }\n    return (\n        <button name={value} className={buttonStyle} onClick={handleButtonClick}>\n            {label}\n        </button>\n    );\n};\n\nexport default Button;","import React from \"react\";\nimport Button from \"./Button\";\nconst Keypad = (props) => {\n   const { actionToPerform, allClear } = props;\n   const numericKeys = [7, 8, 9, 4, 5, 6, 1, 2, 3];\n\nconst operatorKeys = [\n   { label: \"÷\", value: \"/\" },\n   { label: \"×\", value: \"x\" },\n   { label: \"-\", value: \"-\" },\n   { label: \"+\", value: \"+\" },\n   { label: \"=\", value: \"=\" }\n];\n\nconst functionKeys = [\n   { label: allClear ? \"AC\" : \"C\", value: allClear ? \"AC\" : \"C\" },\n   { label: \"±\", value: \"+/-\" },\n   { label: \"%\", value: \"%\" }\n];\n\nconst lastRowKeys = [\n   { label: \"0\", value: \"0\", type: \"numeric\", buttonStyle: \"numeric-key special\" },\n   { label: \"·\", value: \".\", type: \"fx\", buttonStyle: \"numeric-key\" }\n];\n   const handleClickButton = (value, keyType) => {\n      actionToPerform(value, keyType);\n   }\n   return(\n      <div id=\"keypad\" className=\"flex row jc-sp-around\">\n         <div className=\"grid\">\n            {functionKeys.map(\n                    functionKey =>\n                        <Button key={functionKey.label} label={functionKey.label} value={functionKey.value}\n                            buttonStyle=\"fx-key\" onClick={handleClickButton} type=\"fx\" />\n             )}\n            {numericKeys.map(\n                    numericKey =>\n                        <Button key={numericKey} label={numericKey} value={numericKey}\n                            buttonStyle=\"numeric-key\" onClick={handleClickButton} type=\"numeric\" />\n             )}\n            {lastRowKeys.map(\n                    lastRowKey =>\n                        <Button key={lastRowKey.label} label={lastRowKey.label} value={lastRowKey.value}\n                            buttonStyle={lastRowKey.buttonStyle} onClick={handleClickButton} type={lastRowKey.type} />\n             )} \n         </div>\n         <div className=\"flex column jc-sp-btw\">\n            {operatorKeys.map(\n                    operatorKey =>\n                        <Button key={operatorKey.label} label={operatorKey.label} value={operatorKey.value}\n                            buttonStyle=\"op-key\" onClick={handleClickButton} type=\"operator\" />\n             )}\n         </div>\n      </div>      \n   )\n}\n\nexport default Keypad;\n","import React, { useEffect, useState } from \"react\";\nimport Display from \"./Display\";\nimport Keypad from \"./Keypad\";\n\nconst Calculator = () => {\n  const [accValue, setAccValue] = useState(null);\n  const [screenValue, setScreenValue] = useState(\"0\");\n  const [currentOperator, setCurrentOperator] = useState(null);\n  const [expectsOperand, setExpectsOperand] = useState(false);\n  const handleActionToPerform = (value, keyType) => {\n    switch (keyType) {\n      case \"fx\":\n        handleClickFunctionKey(value);\n        break;\n      case \"numeric\":\n        handleClickNumericKey(value);\n        break;\n      case \"operator\":\n        handleClickOperator(value);\n        break;\n    }\n  };\n\n  const handleClickFunctionKey = (value) => {\n    switch (value) {\n      case \"AC\":\n        allClear();\n        break;\n      case \"C\":\n        clearScreen();\n        break;\n      case \"+/-\":\n        reverseSign();\n        break;\n      case \"%\":\n        percentage();\n        break;\n      case \".\":\n        addDecimalPoint();\n        break;\n    }\n  };\n  const allClear = () => {\n    setAccValue(null);\n    setScreenValue(\"0\");\n    setCurrentOperator(null);\n    setExpectsOperand(false);\n  };\n  const clearScreen = () => {\n    setScreenValue(\"0\");\n  };\n  const isScreenClear = screenValue === \"0\";\n  const reverseSign = () => {\n    setScreenValue(String(-parseFloat(screenValue)));\n  };\n  const percentage = () => {\n    setScreenValue(String(parseFloat(screenValue) / 100));\n  };\n  const addDecimalPoint = () => {\n    if (expectsOperand) {\n      setScreenValue(\"0.\");\n    } else {\n      if (!screenValue.includes(\".\")) setScreenValue(screenValue + \".\");\n    }\n    setExpectsOperand(false);\n  };\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [screenValue]);\n\n  const handleKeyDown = (e) => {\n    if (e.key === \"Backspace\") {\n      e.preventDefault();\n      clearLastDigit();\n    }\n  };\n\n  const clearLastDigit = () => {\n    if (screenValue !== \"0\")\n      if (screenValue.length > 1) setScreenValue(\"0\");\n      else {\n        setScreenValue(screenValue.substring(0, screenValue.length - 1));\n      }\n  };\n\n  const handleClickNumericKey = (value) => {\n    if (expectsOperand) {\n      setScreenValue(String(value));\n      setExpectsOperand(false);\n    } else\n      setScreenValue(screenValue === \"0\" ? String(value) : screenValue + value);\n  };\n\n  const handleClickOperator = (operator) => {\n    const inputValue = parseFloat(screenValue);\n    if (accValue === null) {\n      setAccValue(inputValue);\n    } else {\n      if (currentOperator) {\n        const resultValue = operate(currentOperator, accValue, inputValue);\n        setAccValue(resultValue);\n        setScreenValue(String(resultValue));\n      }\n    }\n    setExpectsOperand(true);\n    setCurrentOperator(operator);\n  };\n\n  const operate = (operator, accValue, inputValue) => {\n    switch (operator) {\n      case \"+\":\n        return accValue + inputValue;\n      case \"-\":\n        return accValue - inputValue;\n      case \"x\":\n        return accValue * inputValue;\n      case \"/\":\n        return accValue / inputValue;\n      case \"=\":\n        return inputValue;\n    }\n  };\n  return (\n    <div id=\"calculator-view\" className={\"flex column jc-center ai-center\"}>\n      <div id=\"viewport\" className={\"flex column jc-sp-between ai-center\"}>\n        <Display value={screenValue} />\n        <Keypad\n          actionToPerform={handleActionToPerform}\n          allClear={isScreenClear}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Calculator;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calculator from './components/Calculator';\nimport './App.scss'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n\n"],"sourceRoot":""}